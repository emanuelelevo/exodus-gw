{"openapi": "3.0.2", "info": {"title": "exodus-gw", "version": "0.1.0"}, "paths": {"/healthcheck": {"get": {"tags": ["service"], "summary": "Healthcheck", "description": "Returns a successful response if the service is running.", "operationId": "healthcheck_healthcheck_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/healthcheck-worker": {"get": {"tags": ["service"], "summary": "Healthcheck Worker", "description": "Returns a successful response if background workers are running.", "operationId": "healthcheck_worker_healthcheck_worker_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/whoami": {"get": {"tags": ["service"], "summary": "Whoami", "description": "Return basic information on the caller's authentication & authorization context.\n\nThis endpoint may be used to determine whether the caller is authenticated to\nthe exodus-gw service, and if so, which set of role(s) are held by the caller.\n\nIt is a read-only endpoint intended for diagnosing authentication issues.", "operationId": "whoami_whoami_get", "responses": {"200": {"description": "returns caller's auth context", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CallContext"}, "example": {"client": {"roles": ["someRole", "anotherRole"], "authenticated": true, "serviceAccountId": "clientappname"}, "user": {"roles": ["viewer"], "authenticated": true, "internalUsername": "someuser"}}}}}}}}, "/upload/{env}/{key}": {"put": {"tags": ["upload"], "summary": "Upload bytes", "description": "Write to an object, either as a standalone operation or within a multi-part upload.\n\nTo upload an entire object:\n- include all object bytes in request body\n- see also: https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html\n\nTo upload part of an object:\n- provide multipart upload ID in ``uploadId``\n- provide part number from 1 to 10,000 in ``partNumber``\n- include part of an object in request body (must be at least 5MB in size, except last part)\n- retain the `ETag` from the response, as it will be required to complete the upload\n- see also: https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html", "operationId": "upload_upload__env___key__put", "parameters": [{"description": "Target CDN environment", "required": true, "schema": {"title": "Env", "type": "string", "description": "Target CDN environment"}, "name": "env", "in": "path"}, {"description": "S3 object key", "required": true, "schema": {"title": "Key", "type": "string", "description": "S3 object key"}, "name": "key", "in": "path"}, {"description": "ID of an existing multi-part upload.", "required": false, "schema": {"title": "Uploadid", "type": "string", "description": "ID of an existing multi-part upload."}, "name": "uploadId", "in": "query"}, {"description": "Part number, where multi-part upload is used.", "required": false, "schema": {"title": "Partnumber", "type": "integer", "description": "Part number, where multi-part upload is used."}, "name": "partNumber", "in": "query"}], "responses": {"200": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["upload"], "summary": "Create/complete multipart upload", "description": "Create or complete a multi-part upload.\n\nTo create a multi-part upload:\n- include ``uploads`` in query string, with no value (e.g. ``POST /upload/{env}/{key}?uploads``)\n- see also: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\n\nTo complete a multi-part upload:\n- include ``uploadId`` in query string\n- include parts with ETags in request body\n- see also: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html", "operationId": "multipart_upload_upload__env___key__post", "parameters": [{"description": "Target CDN environment", "required": true, "schema": {"title": "Env", "type": "string", "description": "Target CDN environment"}, "name": "env", "in": "path"}, {"description": "S3 object key", "required": true, "schema": {"title": "Key", "type": "string", "description": "S3 object key"}, "name": "key", "in": "path"}, {"description": "\nID of an existing multi-part upload.\n\nIf this argument is provided, it must be the ID of a multi-part upload\ncreated previously. The upload will be validated and completed.\n\nMust not be passed together with ``uploads``.", "required": false, "schema": {"title": "Uploadid", "type": "string", "description": "\nID of an existing multi-part upload.\n\nIf this argument is provided, it must be the ID of a multi-part upload\ncreated previously. The upload will be validated and completed.\n\nMust not be passed together with ``uploads``."}, "name": "uploadId", "in": "query"}, {"description": "\nIf this argument is provided, a new multi-part upload will be created\nand its ID returned. The provided value should be an empty string.\n\nMust not be passed together with ``uploadId``.", "required": false, "schema": {"title": "Uploads", "type": "string", "description": "\nIf this argument is provided, a new multi-part upload will be created\nand its ID returned. The provided value should be an empty string.\n\nMust not be passed together with ``uploadId``."}, "name": "uploads", "in": "query"}], "responses": {"200": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["upload"], "summary": "Abort multipart upload", "description": "Abort a multipart upload.\n\nIf an upload cannot be completed, explicitly aborting it is recommended in order\nto free up resources as early as possible, although this is not mandatory.\n\nSee also: https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html", "operationId": "abort_multipart_upload_upload__env___key__delete", "parameters": [{"description": "Target CDN environment", "required": true, "schema": {"title": "Env", "type": "string", "description": "Target CDN environment"}, "name": "env", "in": "path"}, {"description": "S3 object key", "required": true, "schema": {"title": "Key", "type": "string", "description": "S3 object key"}, "name": "key", "in": "path"}, {"description": "ID of a multipart upload", "required": true, "schema": {"title": "Uploadid", "type": "string", "description": "ID of a multipart upload"}, "name": "uploadId", "in": "query"}], "responses": {"200": {"description": "Empty response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/{env}/publish": {"post": {"tags": ["publish", "publish"], "summary": "Publish", "description": "Returns a new, empty publish object.", "operationId": "publish__env__publish_post", "parameters": [{"required": true, "schema": {"title": "Env", "type": "string"}, "name": "env", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Publish"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/{env}/publish/{publish_id}": {"put": {"tags": ["publish"], "summary": "Update Publish Items", "description": "Update the publish objects with items.", "operationId": "update_publish_items__env__publish__publish_id__put", "parameters": [{"required": true, "schema": {"title": "Env", "type": "string"}, "name": "env", "in": "path"}, {"required": true, "schema": {"title": "Publish Id", "type": "string", "format": "uuid"}, "name": "publish_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemBase"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/{env}/publish/{publish_id}/commit": {"post": {"tags": ["publish"], "summary": "Commit Publish", "description": "Write the publish's items, in batches, to DynamoDB table.", "operationId": "commit_publish__env__publish__publish_id__commit_post", "parameters": [{"required": true, "schema": {"title": "Env", "type": "string"}, "name": "env", "in": "path"}, {"required": true, "schema": {"title": "Publish Id", "type": "string", "format": "uuid"}, "name": "publish_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"CallContext": {"title": "CallContext", "type": "object", "properties": {"client": {"title": "Client", "allOf": [{"$ref": "#/components/schemas/ClientContext"}], "default": {"roles": [], "authenticated": false}}, "user": {"title": "User", "allOf": [{"$ref": "#/components/schemas/UserContext"}], "default": {"roles": [], "authenticated": false}}}, "description": "Represents an authenticated (or not) context for an incoming request.\n\nUse the fields on this model to decide whether the current request belongs\nto an authenticated user, and if so, to determine which role(s) are held\nby the user."}, "ClientContext": {"title": "ClientContext", "type": "object", "properties": {"roles": {"title": "Roles", "type": "array", "items": {"type": "string"}, "default": []}, "authenticated": {"title": "Authenticated", "type": "boolean", "default": false}, "serviceAccountId": {"title": "Serviceaccountid", "type": "string"}}, "description": "Call context data relating to service accounts / machine users."}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "Item": {"title": "Item", "required": ["web_uri", "object_key", "from_date", "publish_id"], "type": "object", "properties": {"web_uri": {"title": "Web Uri", "type": "string"}, "object_key": {"title": "Object Key", "type": "string"}, "from_date": {"title": "From Date", "type": "string"}, "publish_id": {"title": "Publish Id", "type": "string", "format": "uuid"}}}, "ItemBase": {"title": "ItemBase", "required": ["web_uri", "object_key", "from_date"], "type": "object", "properties": {"web_uri": {"title": "Web Uri", "type": "string"}, "object_key": {"title": "Object Key", "type": "string"}, "from_date": {"title": "From Date", "type": "string"}}}, "Publish": {"title": "Publish", "required": ["id"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "items": {"title": "Items", "type": "array", "items": {"$ref": "#/components/schemas/Item"}, "default": []}}}, "UserContext": {"title": "UserContext", "type": "object", "properties": {"roles": {"title": "Roles", "type": "array", "items": {"type": "string"}, "default": []}, "authenticated": {"title": "Authenticated", "type": "boolean", "default": false}, "internalUsername": {"title": "Internalusername", "type": "string"}}, "description": "Call context data relating to human users."}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"type": "string"}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}}}